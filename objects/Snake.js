"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Snake = void 0;

var _interfaces = require("../interfaces/interfaces");

var _Square = require("./Square");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Snake = function Snake(position, moveRange) {
  var _this = this;

  _classCallCheck(this, Snake);

  _defineProperty(this, "segments", []);

  _defineProperty(this, "moveRange", void 0);

  _defineProperty(this, "addSegment", function (direction) {
    var lastSegment = _this.segments[_this.segments.length - 1];
    var newSegment = new _Square.Square(null, "#39B4BA", _this.moveRange);

    if (_this.segments.length < 2) {
      switch (direction) {
        case _interfaces.Direction.Up:
          newSegment.position = {
            x: lastSegment.position.x,
            y: lastSegment.position.y + _this.moveRange
          };
          break;

        case _interfaces.Direction.Down:
          newSegment.position = {
            x: lastSegment.position.x,
            y: lastSegment.position.y - _this.moveRange
          };
          break;

        case _interfaces.Direction.Left:
          newSegment.position = {
            x: lastSegment.position.x + _this.moveRange,
            y: lastSegment.position.y
          };
          break;

        case _interfaces.Direction.Right:
          newSegment.position = {
            x: lastSegment.position.x - _this.moveRange,
            y: lastSegment.position.y
          };
          break;
      }
    } else {
      var penultSegment = _this.segments[_this.segments.length - 2];

      if (penultSegment.position.x === lastSegment.position.x && penultSegment.position.y < lastSegment.position.y) {
        newSegment.position = {
          x: lastSegment.position.x,
          y: lastSegment.position.y + _this.moveRange
        };
      } else if (penultSegment.position.x === lastSegment.position.x && penultSegment.position.y > lastSegment.position.y) {
        newSegment.position = {
          x: lastSegment.position.x,
          y: lastSegment.position.y - _this.moveRange
        };
      } else if (penultSegment.position.x < lastSegment.position.x && penultSegment.position.y === lastSegment.position.y) {
        newSegment.position = {
          x: lastSegment.position.x + _this.moveRange,
          y: lastSegment.position.y
        };
      } else if (penultSegment.position.x > lastSegment.position.x && penultSegment.position.y === lastSegment.position.y) {
        newSegment.position = {
          x: lastSegment.position.x - _this.moveRange,
          y: lastSegment.position.y
        };
      }
    }

    if (newSegment != null) _this.segments.push(newSegment);
  });

  _defineProperty(this, "recalculateSegments", function (direction) {
    var buffor = _this.segments[0].position;

    for (var i = 1; i < _this.segments.length; i++) {
      var tmp = buffor;
      buffor = _this.segments[i].position;
      _this.segments[i].position = tmp;
    }

    switch (direction) {
      case _interfaces.Direction.Up:
        _this.segments[0].position = {
          x: _this.segments[0].position.x,
          y: _this.segments[0].position.y - _this.moveRange
        };
        break;

      case _interfaces.Direction.Down:
        _this.segments[0].position = {
          x: _this.segments[0].position.x,
          y: _this.segments[0].position.y + _this.moveRange
        };
        break;

      case _interfaces.Direction.Left:
        _this.segments[0].position = {
          x: _this.segments[0].position.x - _this.moveRange,
          y: _this.segments[0].position.y
        };
        break;

      case _interfaces.Direction.Right:
        _this.segments[0].position = {
          x: _this.segments[0].position.x + _this.moveRange,
          y: _this.segments[0].position.y
        };
        break;
    }
  });

  _defineProperty(this, "detectCollisions", function (canvas) {
    //endmap logic
    var segments = _this.segments;
    var head = segments[0];
    if (head.position.y < 0 || head.position.y >= canvas.height || head.position.x < 0 || head.position.x >= canvas.width) return true; //snake collision detection

    for (var i = 1; i < segments.length; i++) {
      if (head.position.x === segments[i].position.x && head.position.y === segments[i].position.y) {
        return true;
      }
    }

    return false;
  });

  _defineProperty(this, "detectedFood", function (food) {
    var head = _this.segments[0];

    if (head.position.x === food.segment.position.x && head.position.y === food.segment.position.y) {
      return true;
    }

    return false;
  });

  _defineProperty(this, "getSegments", function () {
    return _this.segments;
  });

  this.moveRange = moveRange;
  this.segments.push(new _Square.Square(position, "#0C5E62", this.moveRange));
};

exports.Snake = Snake;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,