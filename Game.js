"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Game = void 0;

var _helpers = require("./helpers/helpers");

var _interfaces = require("./interfaces/interfaces");

var _Food = require("./objects/Food");

var _Snake = require("./objects/Snake");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Game = //frame settings
//contollers
// game objects
//settings
function Game(moveRange) {
  var _this = this;

  _classCallCheck(this, Game);

  _defineProperty(this, "canvas", void 0);

  _defineProperty(this, "context", void 0);

  _defineProperty(this, "scoreboardHTML", void 0);

  _defineProperty(this, "stop", false);

  _defineProperty(this, "frameCount", 0);

  _defineProperty(this, "fps", void 0);

  _defineProperty(this, "now", void 0);

  _defineProperty(this, "fpsInterval", void 0);

  _defineProperty(this, "startTime", void 0);

  _defineProperty(this, "then", void 0);

  _defineProperty(this, "elapsed", void 0);

  _defineProperty(this, "direction", _interfaces.Direction.Down);

  _defineProperty(this, "pressedKeys", []);

  _defineProperty(this, "snake", void 0);

  _defineProperty(this, "food", void 0);

  _defineProperty(this, "score", 0);

  _defineProperty(this, "moveRange", void 0);

  _defineProperty(this, "startAnimating", function (fps) {
    _this.fpsInterval = 1000 / fps;
    _this.then = Date.now();
    _this.startTime = _this.then;

    _this.animate();
  });

  _defineProperty(this, "animate", function () {
    if (_this.stop) {
      return;
    }

    requestAnimationFrame(_this.animate);
    _this.now = Date.now();
    _this.elapsed = _this.now - _this.then;

    if (_this.elapsed > _this.fpsInterval) {
      _this.context.clearRect(0, 0, _this.canvas.width, _this.canvas.height);

      _this.then = _this.now - _this.elapsed % _this.fpsInterval;

      _this.setDirection();

      _this.snake.recalculateSegments(_this.direction);

      if (_this.snake.detectedFood(_this.food)) {
        _this.snake.addSegment(_this.direction);

        _this.food.generateApple(_this.snake, _this.canvas, _this.moveRange);

        _this.score++;

        _this.showScore();
      }

      if (_this.snake.detectCollisions(_this.canvas)) _this.start(); // this.setDirection();

      _this.redraw();
    }
  });

  _defineProperty(this, "start", function () {
    _this.score = 0;
    _this.snake = new _Snake.Snake({
      x: (0, _helpers.generatePosition)(_this.moveRange, 0, _this.canvas.width),
      y: (0, _helpers.generatePosition)(_this.moveRange, 0, _this.canvas.height)
    }, _this.moveRange);
    _this.food = new _Food.Food(_this.moveRange);

    _this.food.generateApple(_this.snake, _this.canvas, _this.moveRange);

    _this.showScore();
  });

  _defineProperty(this, "redraw", function () {
    //background
    for (var i = 0; i < _this.canvas.width; i += _this.moveRange) {
      for (var j = 0; j < _this.canvas.height; j += _this.moveRange) {
        _this.context.beginPath();

        _this.context.lineWidth = 0.5;
        _this.context.strokeStyle = "#fff";

        _this.context.rect(i, j, _this.moveRange, _this.moveRange);

        _this.context.stroke();
      }
    } //food


    _this.context.beginPath();

    _this.context.fillStyle = _this.food.segment.color;

    _this.context.fillRect(_this.food.segment.position.x, _this.food.segment.position.y, _this.food.segment.width, _this.food.segment.height); //snake


    var segments = _this.snake.getSegments();

    for (var _i = segments.length - 1; _i >= 0; _i--) {
      _this.context.beginPath();

      _this.context.fillStyle = segments[_i].color;

      _this.context.fillRect(segments[_i].position.x, segments[_i].position.y, segments[_i].width, segments[_i].height);
    }
  });

  _defineProperty(this, "createUserEvents", function () {
    window.addEventListener("keydown", _this.pressKeyEventHandler); // window.addEventListener("keyup", this.releaseKeyEventHanlde);
  });

  _defineProperty(this, "pressKeyEventHandler", function (e) {
    _this.pressedKeys = [];
    var key = e.key.toLowerCase();

    var find = _this.pressedKeys.indexOf(key);

    if (find <= -1) _this.pressedKeys.push(key);
  });

  _defineProperty(this, "setDirection", function () {
    if (_this.pressedKeys.length !== 1) return;
    if (_this.pressedKeys[0] === "w" && _this.direction != _interfaces.Direction.Down) _this.direction = _interfaces.Direction.Up;else if (_this.pressedKeys[0] === "s" && _this.direction != _interfaces.Direction.Up) _this.direction = _interfaces.Direction.Down;else if (_this.pressedKeys[0] === "a" && _this.direction != _interfaces.Direction.Right) _this.direction = _interfaces.Direction.Left;else if (_this.pressedKeys[0] === "d" && _this.direction != _interfaces.Direction.Left) _this.direction = _interfaces.Direction.Right;
  });

  _defineProperty(this, "showScore", function () {
    var scoreboard = _this.scoreboardHTML;
    var result = scoreboard.getElementsByClassName("result")[0];
    result.innerHTML = _this.score.toString();
  });

  var canvas = document.getElementById("canvas");
  var context = canvas.getContext("2d");
  var scoreboardHTML = document.getElementById("scoreboard");
  canvas.width = moveRange * 25;
  canvas.height = moveRange * 25;
  this.canvas = canvas;
  this.context = context;
  this.scoreboardHTML = scoreboardHTML;
  this.moveRange = moveRange;
  this.createUserEvents();
  this.start();
  this.startAnimating(10);
};

exports.Game = Game;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,